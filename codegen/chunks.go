package codegen

import (
	"fmt"
	"strings"
)

const header = "// Code generated by %s DO NOT EDIT."

func formatHeader(name string) string {
	return fmt.Sprintf(header, name)
}

const packageCode = "package %s"

func formatPackage(name string) string {
	return fmt.Sprintf(packageCode, name)
}

const checkSumCode = `const CheckSum = "%s"`

func formatCheckSum(checkSum string) string {
	return fmt.Sprintf(checkSumCode, checkSum)
}

const defaultMetaDataCode = `
type ConstantMetaData[T comparable] struct {
	ID   T      ` + "`json:\"id\"`" + `
	Name string ` + "`json:\"name\"`" + `
}

`

const constantCommentCode = "// %s ... %s"

func formatConstantComment(name, comment string) string {
	return fmt.Sprintf(constantCommentCode, name, comment)
}

const constantTypeCode = `
type %s %s

`

func formatConstantType(name, base string) string {
	return fmt.Sprintf(constantTypeCode, name, base)
}

const constantValuesCode = `
const (
%s
)

`

const constantMethodStringCode = `
func (c %s) String() string {
	return string(c)
}

`

func formatConstantMethodString(name string) string {
	return fmt.Sprintf(constantMethodStringCode, name)
}

const constantMethodMetaCode = `
func (c %s) Meta() (*%s, bool) {
	m, ok := %s[c]
	return m, ok
}

`

func formatConstantMethodMeta(name string) string {
	tName := formatConstantMetaDataTypeName(name)
	mapName := formatConstantMetaDataMapVariableName(name)
	return fmt.Sprintf(constantMethodMetaCode, name, tName, mapName)
}

const constantMethodNameCode = `
func (c %s) Name() string {
	if m, ok := c.Meta(); ok {
		return m.Name
	}
	return ""
}

`

func formatConstantMethodName(name string) string {
	return fmt.Sprintf(constantMethodNameCode, name)
}

func formatConstantValues(values string) string {
	return fmt.Sprintf(constantValuesCode, values)
}

const constantValueCode = `%s%s %s = %s`

func formatConstantValue(tName, vName string, hasDoubleQuote bool, value string) string {
	outputValue := value
	if hasDoubleQuote {
		outputValue = fmt.Sprintf(`"%s"`, value)
	}
	return fmt.Sprintf(constantValueCode, tName, vName, tName, outputValue)
}

const constantMetaDataTypeNameCode = `%sMetaData`

func formatConstantMetaDataTypeName(tName string) string {
	return fmt.Sprintf(constantMetaDataTypeNameCode, tName)
}

const constantMetaDataTypeByGenericsCode = `
type %s ConstantMetaData[%s]

`

func formatConstantMetaDataByGenerics(tName string) string {
	return fmt.Sprintf(constantMetaDataTypeByGenericsCode, formatConstantMetaDataTypeName(tName), tName)
}

const constantMetaDataTypeCode = `
type %s struct {
%s
}

`

func formatConstantMetaDataType(tName, params string) string {
	return fmt.Sprintf(constantMetaDataTypeCode, formatConstantMetaDataTypeName(tName), params)
}

const constantMetaDataTypeCodeParam = `%s   %s ` + "`json:\"%s\"`"

func formatConstantMetaDataTypeParam(name, tName string) string {
	return fmt.Sprintf(constantMetaDataTypeCodeParam, toPascalCase(name), tName, name)
}

func formatConstantMetaDataTypeID(tName string) string {
	return fmt.Sprintf(constantMetaDataTypeCodeParam, "ID", tName, "id")
}

const constantMetaDataMapVariableNameCode = `%sMap`

func formatConstantMetaDataMapVariableName(tName string) string {
	return fmt.Sprintf(constantMetaDataMapVariableNameCode, tName)
}

const constantMetaDataMapTypeCode = `map[%s]*%s`

func formatConstantMetaDataMapTypeName(tName string) string {
	return fmt.Sprintf(constantMetaDataMapTypeCode, tName, formatConstantMetaDataTypeName(tName))
}

const constantMetaDataMapCode = `
var %s %s

`

func formatConstantMetaDataMap(tName string) string {
	return fmt.Sprintf(constantMetaDataMapCode, formatConstantMetaDataMapVariableName(tName), formatConstantMetaDataMapTypeName(tName))
}

const constantMetaDataListCode = `
var %s = []*%s{
%s
}

`

func formatConstantMetaDataList(tName, elements string) string {
	return fmt.Sprintf(constantMetaDataListCode, toPluralForm(tName), formatConstantMetaDataTypeName(tName), elements)
}

const constantMetaDataListElementCode = `{
%s
},`

func formatConstantMetaDataListElement(params string) string {
	return fmt.Sprintf(constantMetaDataListElementCode, params)
}

const constantMetaDataParamCode = `%s: %s,`

func formatConstantMetaDataParam(name, value string, hasDoubleQuote bool) string {
	if hasDoubleQuote {
		value = fmt.Sprintf(`"%s"`, value)
	}
	return fmt.Sprintf(constantMetaDataParamCode, toPascalCase(name), value)
}

const constantMetaDataSliceValueCode = `%s{%s}`

func formatConstantMetaDataSliceParam(name, typ string, values []string, hasDoubleQuote bool) string {
	if hasDoubleQuote {
		for i, v := range values {
			values[i] = fmt.Sprintf(`"%s"`, v)
		}
	}

	value := fmt.Sprintf(constantMetaDataSliceValueCode, typ, strings.Join(values, ","))
	return fmt.Sprintf(constantMetaDataParamCode, toPascalCase(name), value)
}

const constantsTypeNameCode = `Constants`
const constantsVariableNameCode = `ConstantsData`

const constantsStructCode = `
type ` + constantsTypeNameCode + ` struct {
%s
}

var ` + constantsVariableNameCode + ` *` + constantsTypeNameCode + `

`

func formatConstantsStruct(params string) string {
	return fmt.Sprintf(constantsStructCode, params)
}

const constantsStructParamCode = `%s %s ` + "`json:\"%s\"`"

func formatConstantsStructParam(name, tName string) string {
	return fmt.Sprintf(constantsStructParamCode, toPascalCase(name), tName, name)
}

const constantsMethodGetConstIDsCode = `
// deprecated use ConstIDs
func (c *` + constantsTypeNameCode + `) GetConstIDs() [][]any {
	%s
	return [][]any{
		%s
	}
}

func (c *` + constantsTypeNameCode + `) ConstIDs() [][]any {
	return c.GetConstIDs()
}

`

func formatConstantsMethodGetConstIDs(generateAnySliceCodes, constantsParams string) string {
	return fmt.Sprintf(constantsMethodGetConstIDsCode, generateAnySliceCodes, constantsParams)
}

const generateAnySliceCode = `
%s := []any{}
for _, v := range c.%s {
	%s = append(%s, v.ID)
}
`

func formatGenerateAnySliceCode(name, tName string) string {
	return fmt.Sprintf(generateAnySliceCode, name, toPluralForm(tName), name, name)
}

const initCode = `
func init() {
	%s
	` + constantsVariableNameCode + ` = &` + constantsTypeNameCode + `{
		%s
	}
}
`

func formatInitCode(generateMapCodes, constantsParams string) string {
	return fmt.Sprintf(initCode, generateMapCodes, constantsParams)
}

const generateMapCode = `
	%s = %s{}
	for _, v := range %s {
		%s[v.ID] = v
	}
`

func formatGenerateMapCode(tName string) string {
	return fmt.Sprintf(generateMapCode,
		formatConstantMetaDataMapVariableName(tName),
		formatConstantMetaDataMapTypeName(tName),
		toPluralForm(tName),
		formatConstantMetaDataMapVariableName(tName),
	)
}

const constantsInitParamCode = `%s: %s,`

func formatConstantsInitParam(name, value string) string {
	return fmt.Sprintf(constantsInitParamCode, name, value)
}
