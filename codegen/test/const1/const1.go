// Code generated by const1.yaml DO NOT EDIT.

package const1

const CheckSum = "2846f8c864938c44581190cba8e2968c960fd37cd26e511beba22fb1859eca31"

type ConstantMetaData[T comparable] struct {
	ID   T      `json:"id"`
	Name string `json:"name"`
}

// Animal ... 動物
type Animal string

func (c Animal) String() string {
	return string(c)
}

func (c Animal) Meta() (*AnimalMetaData, bool) {
	m, ok := AnimalMap[c]
	return m, ok
}

func (c Animal) Name() string {
	if m, ok := c.Meta(); ok {
		return m.Name
	}
	return ""
}

const (
	AnimalDog Animal = "dog"
	AnimalCat Animal = "cat"
)

type AnimalMetaData ConstantMetaData[Animal]

var Animals = []*AnimalMetaData{
	{
		ID:   AnimalDog,
		Name: "犬",
	},
	{
		ID:   AnimalCat,
		Name: "猫",
	},
}

var AnimalMap map[Animal]*AnimalMetaData

// ExtendsTest ... extends のテスト
type ExtendsTest string

func (c ExtendsTest) String() string {
	return string(c)
}

func (c ExtendsTest) Meta() (*ExtendsTestMetaData, bool) {
	m, ok := ExtendsTestMap[c]
	return m, ok
}

func (c ExtendsTest) Name() string {
	if m, ok := c.Meta(); ok {
		return m.Name
	}
	return ""
}

const (
	ExtendsTestV1 ExtendsTest = "v1"
)

type ExtendsTestMetaData struct {
	ID               ExtendsTest `json:"id"`
	Name             string      `json:"name"`
	IntValue         int         `json:"int_value"`
	IntSliceValue    []int       `json:"int_slice_value"`
	Int64Value       int64       `json:"int64_value"`
	Int64SliceValue  []int64     `json:"int64_slice_value"`
	FloatValue       float64     `json:"float_value"`
	FloatSliceValue  []float64   `json:"float_slice_value"`
	StringValue      string      `json:"string_value"`
	StringSliceValue []string    `json:"string_slice_value"`
}

var ExtendsTests = []*ExtendsTestMetaData{
	{
		ID:               ExtendsTestV1,
		Name:             "value test 1",
		IntValue:         1,
		IntSliceValue:    []int{1, -2},
		Int64Value:       9223372036854775807,
		Int64SliceValue:  []int64{9223372036854775807, 1},
		FloatValue:       1.5,
		FloatSliceValue:  []float64{1, 2.5, -2},
		StringValue:      "string",
		StringSliceValue: []string{"a", "b", "c"},
	},
}

var ExtendsTestMap map[ExtendsTest]*ExtendsTestMetaData

// TypeTest ... set other type test
type TypeTest string

func (c TypeTest) String() string {
	return string(c)
}

func (c TypeTest) Meta() (*TypeTestMetaData, bool) {
	m, ok := TypeTestMap[c]
	return m, ok
}

func (c TypeTest) Name() string {
	if m, ok := c.Meta(); ok {
		return m.Name
	}
	return ""
}

const (
	TypeTestV1 TypeTest = "v1"
)

type TypeTestMetaData struct {
	ID          TypeTest    `json:"id"`
	Name        string      `json:"name"`
	Animals     []Animal    `json:"animals"`
	ExtendsTest ExtendsTest `json:"extends_test"`
}

var TypeTests = []*TypeTestMetaData{
	{
		ID:          TypeTestV1,
		Name:        "test",
		Animals:     []Animal{AnimalDog, AnimalCat},
		ExtendsTest: ExtendsTestV1,
	},
}

var TypeTestMap map[TypeTest]*TypeTestMetaData

type Constants struct {
	Animals      []*AnimalMetaData                    `json:"animals"`
	Animal       map[Animal]*AnimalMetaData           `json:"animal"`
	ExtendsTests []*ExtendsTestMetaData               `json:"extends_tests"`
	ExtendsTest  map[ExtendsTest]*ExtendsTestMetaData `json:"extends_test"`
	TypeTests    []*TypeTestMetaData                  `json:"type_tests"`
	TypeTest     map[TypeTest]*TypeTestMetaData       `json:"type_test"`
}

var ConstantsData *Constants

// deprecated use ConstIDs
func (c *Constants) GetConstIDs() [][]any {

	animal := []any{}
	for _, v := range c.Animals {
		animal = append(animal, v.ID)
	}

	extendsTest := []any{}
	for _, v := range c.ExtendsTests {
		extendsTest = append(extendsTest, v.ID)
	}

	typeTest := []any{}
	for _, v := range c.TypeTests {
		typeTest = append(typeTest, v.ID)
	}

	return [][]any{
		animal,
		extendsTest,
		typeTest,
	}
}

func (c *Constants) ConstIDs() [][]any {
	return c.GetConstIDs()
}

func init() {

	AnimalMap = map[Animal]*AnimalMetaData{}
	for _, v := range Animals {
		AnimalMap[v.ID] = v
	}

	ExtendsTestMap = map[ExtendsTest]*ExtendsTestMetaData{}
	for _, v := range ExtendsTests {
		ExtendsTestMap[v.ID] = v
	}

	TypeTestMap = map[TypeTest]*TypeTestMetaData{}
	for _, v := range TypeTests {
		TypeTestMap[v.ID] = v
	}

	ConstantsData = &Constants{
		Animals:      Animals,
		Animal:       AnimalMap,
		ExtendsTests: ExtendsTests,
		ExtendsTest:  ExtendsTestMap,
		TypeTests:    TypeTests,
		TypeTest:     TypeTestMap,
	}
}
