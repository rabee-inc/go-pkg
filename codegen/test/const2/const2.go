// Code generated by const2.yaml DO NOT EDIT.

package const2

const CheckSum = "a86e592e628889bff5958dddd042235242b8c2e2c15f88817acf0f9550462c35"

type ConstantMetaData[T comparable] struct {
	ID   T      `json:"id"`
	Name string `json:"name"`
}

// Color ... 色
type Color int

func (c Color) Meta() (*ColorMetaData, bool) {
	m, ok := ColorMap[c]
	return m, ok
}

func (c Color) Name() string {
	if m, ok := c.Meta(); ok {
		return m.Name
	}
	return ""
}

const (
	ColorRed  Color = 1
	ColorBlue Color = 2
)

type ColorMetaData ConstantMetaData[Color]

var Colors = []*ColorMetaData{
	{
		ID:   ColorRed,
		Name: "赤",
	},
	{
		ID:   ColorBlue,
		Name: "青",
	},
}

var ColorMap map[Color]*ColorMetaData

// Baby ... test: -y to -ies
type Baby string

func (c Baby) String() string {
	return string(c)
}

func (c Baby) Meta() (*BabyMetaData, bool) {
	m, ok := BabyMap[c]
	return m, ok
}

func (c Baby) Name() string {
	if m, ok := c.Meta(); ok {
		return m.Name
	}
	return ""
}

const (
	BabyV1 Baby = "v1"
)

type BabyMetaData ConstantMetaData[Baby]

var Babies = []*BabyMetaData{
	{
		ID:   BabyV1,
		Name: "v1",
	},
}

var BabyMap map[Baby]*BabyMetaData

// Toy ... test: -y to -ys
type Toy string

func (c Toy) String() string {
	return string(c)
}

func (c Toy) Meta() (*ToyMetaData, bool) {
	m, ok := ToyMap[c]
	return m, ok
}

func (c Toy) Name() string {
	if m, ok := c.Meta(); ok {
		return m.Name
	}
	return ""
}

const (
	ToyV1 Toy = "v1"
)

type ToyMetaData ConstantMetaData[Toy]

var Toys = []*ToyMetaData{
	{
		ID:   ToyV1,
		Name: "v1",
	},
}

var ToyMap map[Toy]*ToyMetaData

// Os ... test: -s to -es
type Os string

func (c Os) String() string {
	return string(c)
}

func (c Os) Meta() (*OsMetaData, bool) {
	m, ok := OsMap[c]
	return m, ok
}

func (c Os) Name() string {
	if m, ok := c.Meta(); ok {
		return m.Name
	}
	return ""
}

const (
	OsV1 Os = "v1"
)

type OsMetaData ConstantMetaData[Os]

var Oses = []*OsMetaData{
	{
		ID:   OsV1,
		Name: "v1",
	},
}

var OsMap map[Os]*OsMetaData

type Constants struct {
	Babies []*BabyMetaData        `json:"babies"`
	Baby   map[Baby]*BabyMetaData `json:"baby"`
	Toys   []*ToyMetaData         `json:"toys"`
	Toy    map[Toy]*ToyMetaData   `json:"toy"`
	Oses   []*OsMetaData          `json:"oses"`
	Os     map[Os]*OsMetaData     `json:"os"`
}

var ConstantsData *Constants

// deprecated use ConstIDs
func (c *Constants) GetConstIDs() [][]any {

	baby := []any{}
	for _, v := range c.Babies {
		baby = append(baby, v.ID)
	}

	toy := []any{}
	for _, v := range c.Toys {
		toy = append(toy, v.ID)
	}

	os := []any{}
	for _, v := range c.Oses {
		os = append(os, v.ID)
	}

	return [][]any{
		baby,
		toy,
		os,
	}
}

func (c *Constants) ConstIDs() [][]any {
	return c.GetConstIDs()
}

func init() {

	BabyMap = map[Baby]*BabyMetaData{}
	for _, v := range Babies {
		BabyMap[v.ID] = v
	}

	ToyMap = map[Toy]*ToyMetaData{}
	for _, v := range Toys {
		ToyMap[v.ID] = v
	}

	OsMap = map[Os]*OsMetaData{}
	for _, v := range Oses {
		OsMap[v.ID] = v
	}

	ConstantsData = &Constants{
		Babies: Babies,
		Baby:   BabyMap,
		Toys:   Toys,
		Toy:    ToyMap,
		Oses:   Oses,
		Os:     OsMap,
	}
}
